using MediatR;
using Microsoft.AspNetCore.Mvc;
using SharedKernel.Core;
using Domain.Models;
using Application.CQRS.Product.Commands;
using Application.CQRS.Product.Queries;
using Application.DTO;

namespace API.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ProductController(ISender sender) : ControllerBase
{
    [HttpGet]
    public async Task<IActionResult> GetAllProducts(CancellationToken cancellationToken)
    {
        GetAllProductsQuery getAllProductsQuery = new();

        Result<IEnumerable<Product>> result = await sender.Send(getAllProductsQuery, cancellationToken);

        return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetProductById(Guid id, CancellationToken cancellationToken)
    {
        GetProductByIdQuery getProductByIdQuery = new(id);

        Result<Product> result = await sender.Send(getProductByIdQuery, cancellationToken);

        return result.IsSuccess ? Ok(result.Value) : NotFound(result.Error);
    }
    
    [HttpPost]
    public async Task<IActionResult> CreateProduct(ProductDTO productDTO, CancellationToken cancellationToken)
    {
        CreateProductCommand createProductCommand = new(productDTO);
        
        Result result = await sender.Send(createProductCommand, cancellationToken);

        return result.IsSuccess ? Ok() : BadRequest(result.Error);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateProduct(Guid id, ProductDTO productDTO, CancellationToken cancellationToken)
    {
        UpdateProductCommand updateProductCommand = new(id, productDTO);

        Result result = await sender.Send(updateProductCommand, cancellationToken);

        return result.IsSuccess ? Ok() : NotFound(result.Error);
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteProduct(Guid id, CancellationToken cancellationToken)
    {
        DeleteProductCommand deleteProductCommand = new(id);

        Result result = await sender.Send(deleteProductCommand, cancellationToken);

        return result.IsSuccess ? Ok() : NotFound(result.Error);
    }
}