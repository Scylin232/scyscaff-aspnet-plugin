using Microsoft.OpenApi.Models;
using Serilog;
{{~ if service.flags["Logging"] == "elk" ~}}
using Serilog.Formatting.Elasticsearch;
using Serilog.Sinks.Http.BatchFormatters;
{{~ end ~}}
using Application;
using Infrastructure;

WebApplicationBuilder builder = WebApplication.CreateBuilder(args);

builder.Services
    .AddApplication()
    .AddInfrastructure(builder.Configuration);

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        In = ParameterLocation.Header,
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey
    });
    options.AddSecurityRequirement(new OpenApiSecurityRequirement {
        { 
            new OpenApiSecurityScheme 
            { 
                Reference = new OpenApiReference 
                { 
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer" 
                } 
            },
            new string[] { } 
        } 
    });
});

builder.Host.UseSerilog((context, configuration) =>
{
    {{~ if service.flags["Logging"] == "elk" ~}}
    configuration.WriteTo.DurableHttpUsingFileSizeRolledBuffers(
        requestUri: new Uri("http://logstash:8080").ToString(),
        batchFormatter: new ArrayBatchFormatter(),
        textFormatter: new ElasticsearchJsonFormatter());
    
    {{~ end ~}}
    configuration.ReadFrom.Configuration(context.Configuration);
});

WebApplication app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseSerilogRequestLogging();
app.UseHttpsRedirection();

app.UseCors(config =>
{
    config
        .WithOrigins("SCFVAR_CORS_URL")
        .WithMethods("GET", "POST", "PUT", "DELETE")
        .AllowAnyHeader();
});

app.UseInfrastructure();

app.MapControllers();
{{~ if service.flags["Metrics"] == "prometheus" ~}}
app.MapPrometheusScrapingEndpoint();
{{~ end ~}}

app.Run();
