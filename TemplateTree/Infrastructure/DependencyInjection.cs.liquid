using System.Security.Claims;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using SharedKernel.Repositories;
using Domain.Repositories;
using Infrastructure.Auth;
using Infrastructure.Data;
using Infrastructure.Repositories;

namespace Infrastructure;

public static class DependencyInjection
{
    public static IServiceCollection AddInfrastructure(this IServiceCollection serviceCollection, IConfiguration configuration)
    {
        serviceCollection.AddAuth(configuration);
        serviceCollection.AddDataStorage();
        
        return serviceCollection;
    }
    
    private static IServiceCollection AddAuth(this IServiceCollection serviceCollection, IConfiguration configuration)
    {
        string domain = $"https://{configuration["Auth0:Domain"]}/";

        serviceCollection.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
            .AddJwtBearer(options =>
            {
                options.Authority = domain;
                options.Audience = configuration["Auth0:Audience"];
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    NameClaimType = ClaimTypes.NameIdentifier
                };
            });

        serviceCollection.AddAuthorization(options =>
        {
            {{~ for model in service.models ~}}
            options.AddPolicy("write:{{ model.key | string.downcase }}s", policy => 
                policy.RequireClaim("permissions", "write:{{ model.key | string.downcase }}s"));
            
            options.AddPolicy("edit:{{ model.key | string.downcase }}s", policy => 
                policy.RequireClaim("permissions", "edit:{{ model.key | string.downcase }}s"));
            
            options.AddPolicy("delete:{{ model.key | string.downcase }}s", policy => 
                policy.RequireClaim("permissions", "delete:{{ model.key | string.downcase }}s"));
            {{~ end ~}}
        });

        serviceCollection.AddSingleton<IAuthorizationHandler, HasScopeHandler>();
        
        return serviceCollection;
    }
    
    public static IServiceCollection AddDataStorage(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddDbContext<DataContext>(options =>
        {
            options.UseNpgsql(Environment.GetEnvironmentVariable("CONNECTION_STRING_DEVELOPMENT"),
                optionsBuilder =>
                {
                    optionsBuilder.MigrationsAssembly("API");
                });
        });
        
        serviceCollection.AddScoped<IUnitOfWork>(provider => provider.GetRequiredService<DataContext>());
        
        {{~ for model in service.models ~}}
        serviceCollection.AddScoped<I{{ model.key }}Repository, {{ model.key }}Repository>();
        {{~ end ~}}
        
        if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") != "Development")
            return serviceCollection;
        
        using IServiceScope scope = serviceCollection.BuildServiceProvider().CreateScope();
        
        IServiceProvider services = scope.ServiceProvider;
        
        DataContext context = services.GetRequiredService<DataContext>();
        
        if (context.Database.GetPendingMigrations().Any())
            context.Database.Migrate();
        
        return serviceCollection;
    }
}