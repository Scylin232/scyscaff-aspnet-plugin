using Domain.Models;
using Domain.Repositories;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Repositories;

public class {{ model.key }}Repository(DataContext dataContext) : I{{ model.key }}Repository
{
    public async Task<IEnumerable<{{ model.key }}>> GetAll(int page, int count)
    {
        return await dataContext.Set<{{ model.key }}>()
            .Skip((page - 1) * count)
            .Take(count)
            .ToListAsync();
    }
    
    public async Task<{{ model.key }}?> GetById(Guid id)
    {
        return await dataContext.Set<{{ model.key }}>().SingleOrDefaultAsync(p => p.Id == id);
    }
    
    public Task Add({{ model.key }} newEntity)
    {
        dataContext.Set<{{ model.key }}>().Add(newEntity);
        
        return Task.CompletedTask;
    }
    
    public Task Update({{ model.key }} updatedEntity)
    {
        dataContext.Set<{{ model.key }}>().Update(updatedEntity);
        
        return Task.CompletedTask;
    }
    
    public Task Remove({{ model.key }} deletedEntity)
    {
        dataContext.Set<{{ model.key }}>().Remove(deletedEntity);
        
        return Task.CompletedTask;
    }
}