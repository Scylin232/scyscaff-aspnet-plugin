using System.Linq.Expressions;
using Domain.Models;
using Domain.Repositories;
using Infrastructure.Data;

namespace Infrastructure.Repositories;

public class {{ model.key }}Repository(DataContext dataContext) : EntityFrameworkRepository<{{ model.key }}>(dataContext), I{{ model.key }}Repository
{
    protected override Expression<Func<{{ model.key }}, object>> GetOrderingProperty(string? sortColumn)
    {
        Expression<Func<{{ model.key }}, object>> orderingProperty = sortColumn switch
        {
            {{~ for field in model.value ~}}
            "{{ field.key | string.downcase }}" => {{ model.key | string.downcase }} => {{ model.key | string.downcase }}.{{ field.key }},
            {{~ end ~}}
            _ => {{ model.key | string.downcase }} => {{ model.key | string.downcase }}.Id
        };

        return orderingProperty;
    }

    protected override Expression<Func<{{ model.key }}, bool>> GetSearchExpression(string searchTerm, string searchContent)
    {
        Expression<Func<{{ model.key }}, bool>> searchExpression = searchTerm switch
        {
            {{~ for field in model.value ~}}{{~ if field.value == "string" }}
            "{{ field.key | string.downcase }}" => {{ model.key | string.downcase }} => {{ model.key | string.downcase }}.{{ field.key }}.Contains(searchContent),
            {{~ end ~}}{{~ end ~}}
            _ => _ => true
        };

        return searchExpression;
    }
}